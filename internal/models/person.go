// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Person is an object representing the database table.
type Person struct {
	ID              string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID        string            `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Name            null.String       `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	FirstName       null.String       `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName        null.String       `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	Email           null.String       `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	ManagerID       null.String       `boil:"manager_id" json:"manager_id,omitempty" toml:"manager_id" yaml:"manager_id,omitempty"`
	RoleIds         types.StringArray `boil:"role_ids" json:"role_ids,omitempty" toml:"role_ids" yaml:"role_ids,omitempty"`
	CRMRoleIds      types.StringArray `boil:"crm_role_ids" json:"crm_role_ids,omitempty" toml:"crm_role_ids" yaml:"crm_role_ids,omitempty"`
	IsProvisioned   bool              `boil:"is_provisioned" json:"is_provisioned" toml:"is_provisioned" yaml:"is_provisioned"`
	IsSynced        bool              `boil:"is_synced" json:"is_synced" toml:"is_synced" yaml:"is_synced"`
	Status          string            `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedBy       string            `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt       time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedBy       string            `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	UpdatedAt       time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	GroupID         null.String       `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`
	Type            string            `boil:"type" json:"type" toml:"type" yaml:"type"`
	PhotoURL        null.String       `boil:"photo_url" json:"photo_url,omitempty" toml:"photo_url" yaml:"photo_url,omitempty"`
	OutreachID      null.String       `boil:"outreach_id" json:"outreach_id,omitempty" toml:"outreach_id" yaml:"outreach_id,omitempty"`
	OutreachIsAdmin null.Bool         `boil:"outreach_is_admin" json:"outreach_is_admin,omitempty" toml:"outreach_is_admin" yaml:"outreach_is_admin,omitempty"`
	OutreachGUID    null.String       `boil:"outreach_guid" json:"outreach_guid,omitempty" toml:"outreach_guid" yaml:"outreach_guid,omitempty"`
	OutreachRoleID  null.String       `boil:"outreach_role_id" json:"outreach_role_id,omitempty" toml:"outreach_role_id" yaml:"outreach_role_id,omitempty"`

	R *personR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonColumns = struct {
	ID              string
	TenantID        string
	Name            string
	FirstName       string
	LastName        string
	Email           string
	ManagerID       string
	RoleIds         string
	CRMRoleIds      string
	IsProvisioned   string
	IsSynced        string
	Status          string
	CreatedBy       string
	CreatedAt       string
	UpdatedBy       string
	UpdatedAt       string
	GroupID         string
	Type            string
	PhotoURL        string
	OutreachID      string
	OutreachIsAdmin string
	OutreachGUID    string
	OutreachRoleID  string
}{
	ID:              "id",
	TenantID:        "tenant_id",
	Name:            "name",
	FirstName:       "first_name",
	LastName:        "last_name",
	Email:           "email",
	ManagerID:       "manager_id",
	RoleIds:         "role_ids",
	CRMRoleIds:      "crm_role_ids",
	IsProvisioned:   "is_provisioned",
	IsSynced:        "is_synced",
	Status:          "status",
	CreatedBy:       "created_by",
	CreatedAt:       "created_at",
	UpdatedBy:       "updated_by",
	UpdatedAt:       "updated_at",
	GroupID:         "group_id",
	Type:            "type",
	PhotoURL:        "photo_url",
	OutreachID:      "outreach_id",
	OutreachIsAdmin: "outreach_is_admin",
	OutreachGUID:    "outreach_guid",
	OutreachRoleID:  "outreach_role_id",
}

var PersonTableColumns = struct {
	ID              string
	TenantID        string
	Name            string
	FirstName       string
	LastName        string
	Email           string
	ManagerID       string
	RoleIds         string
	CRMRoleIds      string
	IsProvisioned   string
	IsSynced        string
	Status          string
	CreatedBy       string
	CreatedAt       string
	UpdatedBy       string
	UpdatedAt       string
	GroupID         string
	Type            string
	PhotoURL        string
	OutreachID      string
	OutreachIsAdmin string
	OutreachGUID    string
	OutreachRoleID  string
}{
	ID:              "person.id",
	TenantID:        "person.tenant_id",
	Name:            "person.name",
	FirstName:       "person.first_name",
	LastName:        "person.last_name",
	Email:           "person.email",
	ManagerID:       "person.manager_id",
	RoleIds:         "person.role_ids",
	CRMRoleIds:      "person.crm_role_ids",
	IsProvisioned:   "person.is_provisioned",
	IsSynced:        "person.is_synced",
	Status:          "person.status",
	CreatedBy:       "person.created_by",
	CreatedAt:       "person.created_at",
	UpdatedBy:       "person.updated_by",
	UpdatedAt:       "person.updated_at",
	GroupID:         "person.group_id",
	Type:            "person.type",
	PhotoURL:        "person.photo_url",
	OutreachID:      "person.outreach_id",
	OutreachIsAdmin: "person.outreach_is_admin",
	OutreachGUID:    "person.outreach_guid",
	OutreachRoleID:  "person.outreach_role_id",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PersonWhere = struct {
	ID              whereHelperstring
	TenantID        whereHelperstring
	Name            whereHelpernull_String
	FirstName       whereHelpernull_String
	LastName        whereHelpernull_String
	Email           whereHelpernull_String
	ManagerID       whereHelpernull_String
	RoleIds         whereHelpertypes_StringArray
	CRMRoleIds      whereHelpertypes_StringArray
	IsProvisioned   whereHelperbool
	IsSynced        whereHelperbool
	Status          whereHelperstring
	CreatedBy       whereHelperstring
	CreatedAt       whereHelpertime_Time
	UpdatedBy       whereHelperstring
	UpdatedAt       whereHelpertime_Time
	GroupID         whereHelpernull_String
	Type            whereHelperstring
	PhotoURL        whereHelpernull_String
	OutreachID      whereHelpernull_String
	OutreachIsAdmin whereHelpernull_Bool
	OutreachGUID    whereHelpernull_String
	OutreachRoleID  whereHelpernull_String
}{
	ID:              whereHelperstring{field: "\"person\".\"id\""},
	TenantID:        whereHelperstring{field: "\"person\".\"tenant_id\""},
	Name:            whereHelpernull_String{field: "\"person\".\"name\""},
	FirstName:       whereHelpernull_String{field: "\"person\".\"first_name\""},
	LastName:        whereHelpernull_String{field: "\"person\".\"last_name\""},
	Email:           whereHelpernull_String{field: "\"person\".\"email\""},
	ManagerID:       whereHelpernull_String{field: "\"person\".\"manager_id\""},
	RoleIds:         whereHelpertypes_StringArray{field: "\"person\".\"role_ids\""},
	CRMRoleIds:      whereHelpertypes_StringArray{field: "\"person\".\"crm_role_ids\""},
	IsProvisioned:   whereHelperbool{field: "\"person\".\"is_provisioned\""},
	IsSynced:        whereHelperbool{field: "\"person\".\"is_synced\""},
	Status:          whereHelperstring{field: "\"person\".\"status\""},
	CreatedBy:       whereHelperstring{field: "\"person\".\"created_by\""},
	CreatedAt:       whereHelpertime_Time{field: "\"person\".\"created_at\""},
	UpdatedBy:       whereHelperstring{field: "\"person\".\"updated_by\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"person\".\"updated_at\""},
	GroupID:         whereHelpernull_String{field: "\"person\".\"group_id\""},
	Type:            whereHelperstring{field: "\"person\".\"type\""},
	PhotoURL:        whereHelpernull_String{field: "\"person\".\"photo_url\""},
	OutreachID:      whereHelpernull_String{field: "\"person\".\"outreach_id\""},
	OutreachIsAdmin: whereHelpernull_Bool{field: "\"person\".\"outreach_is_admin\""},
	OutreachGUID:    whereHelpernull_String{field: "\"person\".\"outreach_guid\""},
	OutreachRoleID:  whereHelpernull_String{field: "\"person\".\"outreach_role_id\""},
}

// PersonRels is where relationship names are stored.
var PersonRels = struct {
}{}

// personR is where relationships are stored.
type personR struct {
}

// NewStruct creates a new relationship struct
func (*personR) NewStruct() *personR {
	return &personR{}
}

// personL is where Load methods for each relationship are stored.
type personL struct{}

var (
	personAllColumns            = []string{"id", "tenant_id", "name", "first_name", "last_name", "email", "manager_id", "role_ids", "crm_role_ids", "is_provisioned", "is_synced", "status", "created_by", "created_at", "updated_by", "updated_at", "group_id", "type", "photo_url", "outreach_id", "outreach_is_admin", "outreach_guid", "outreach_role_id"}
	personColumnsWithoutDefault = []string{"id", "tenant_id"}
	personColumnsWithDefault    = []string{"name", "first_name", "last_name", "email", "manager_id", "role_ids", "crm_role_ids", "is_provisioned", "is_synced", "status", "created_by", "created_at", "updated_by", "updated_at", "group_id", "type", "photo_url", "outreach_id", "outreach_is_admin", "outreach_guid", "outreach_role_id"}
	personPrimaryKeyColumns     = []string{"tenant_id", "id"}
	personGeneratedColumns      = []string{}
)

type (
	// PersonSlice is an alias for a slice of pointers to Person.
	// This should almost always be used instead of []Person.
	PersonSlice []*Person
	// PersonHook is the signature for custom Person hook methods
	PersonHook func(context.Context, boil.ContextExecutor, *Person) error

	personQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personType                 = reflect.TypeOf(&Person{})
	personMapping              = queries.MakeStructMapping(personType)
	personPrimaryKeyMapping, _ = queries.BindMapping(personType, personMapping, personPrimaryKeyColumns)
	personInsertCacheMut       sync.RWMutex
	personInsertCache          = make(map[string]insertCache)
	personUpdateCacheMut       sync.RWMutex
	personUpdateCache          = make(map[string]updateCache)
	personUpsertCacheMut       sync.RWMutex
	personUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var personAfterSelectHooks []PersonHook

var personBeforeInsertHooks []PersonHook
var personAfterInsertHooks []PersonHook

var personBeforeUpdateHooks []PersonHook
var personAfterUpdateHooks []PersonHook

var personBeforeDeleteHooks []PersonHook
var personAfterDeleteHooks []PersonHook

var personBeforeUpsertHooks []PersonHook
var personAfterUpsertHooks []PersonHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Person) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Person) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Person) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Person) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Person) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Person) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Person) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Person) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Person) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPersonHook registers your hook function for all future operations.
func AddPersonHook(hookPoint boil.HookPoint, personHook PersonHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		personAfterSelectHooks = append(personAfterSelectHooks, personHook)
	case boil.BeforeInsertHook:
		personBeforeInsertHooks = append(personBeforeInsertHooks, personHook)
	case boil.AfterInsertHook:
		personAfterInsertHooks = append(personAfterInsertHooks, personHook)
	case boil.BeforeUpdateHook:
		personBeforeUpdateHooks = append(personBeforeUpdateHooks, personHook)
	case boil.AfterUpdateHook:
		personAfterUpdateHooks = append(personAfterUpdateHooks, personHook)
	case boil.BeforeDeleteHook:
		personBeforeDeleteHooks = append(personBeforeDeleteHooks, personHook)
	case boil.AfterDeleteHook:
		personAfterDeleteHooks = append(personAfterDeleteHooks, personHook)
	case boil.BeforeUpsertHook:
		personBeforeUpsertHooks = append(personBeforeUpsertHooks, personHook)
	case boil.AfterUpsertHook:
		personAfterUpsertHooks = append(personAfterUpsertHooks, personHook)
	}
}

// One returns a single person record from the query.
func (q personQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Person, error) {
	o := &Person{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for person")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Person records from the query.
func (q personQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonSlice, error) {
	var o []*Person

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Person slice")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Person records in the query.
func (q personQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count person rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q personQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if person exists")
	}

	return count > 0, nil
}

// People retrieves all the records using an executor.
func People(mods ...qm.QueryMod) personQuery {
	mods = append(mods, qm.From("\"person\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"person\".*"})
	}

	return personQuery{q}
}

// FindPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPerson(ctx context.Context, exec boil.ContextExecutor, tenantID string, iD string, selectCols ...string) (*Person, error) {
	personObj := &Person{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"person\" where \"tenant_id\"=$1 AND \"id\"=$2", sel,
	)

	q := queries.Raw(query, tenantID, iD)

	err := q.Bind(ctx, exec, personObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from person")
	}

	if err = personObj.doAfterSelectHooks(ctx, exec); err != nil {
		return personObj, err
	}

	return personObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Person) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no person provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personInsertCacheMut.RLock()
	cache, cached := personInsertCache[key]
	personInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personAllColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personType, personMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"person\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"person\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into person")
	}

	if !cached {
		personInsertCacheMut.Lock()
		personInsertCache[key] = cache
		personInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Person.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Person) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	personUpdateCacheMut.RLock()
	cache, cached := personUpdateCache[key]
	personUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personAllColumns,
			personPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update person, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"person\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, personPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personType, personMapping, append(wl, personPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update person row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for person")
	}

	if !cached {
		personUpdateCacheMut.Lock()
		personUpdateCache[key] = cache
		personUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q personQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for person")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"person\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, personPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all person")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Person) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no person provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	personUpsertCacheMut.RLock()
	cache, cached := personUpsertCache[key]
	personUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			personAllColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			personAllColumns,
			personPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert person, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(personPrimaryKeyColumns))
			copy(conflict, personPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"person\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(personType, personMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert person")
	}

	if !cached {
		personUpsertCacheMut.Lock()
		personUpsertCache[key] = cache
		personUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Person record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Person) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Person provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personPrimaryKeyMapping)
	sql := "DELETE FROM \"person\" WHERE \"tenant_id\"=$1 AND \"id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for person")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q personQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no personQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for person")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(personBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"person\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for person")
	}

	if len(personAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Person) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPerson(ctx, exec, o.TenantID, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"person\".* FROM \"person\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PersonSlice")
	}

	*o = slice

	return nil
}

// PersonExists checks if the Person row exists.
func PersonExists(ctx context.Context, exec boil.ContextExecutor, tenantID string, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"person\" where \"tenant_id\"=$1 AND \"id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tenantID, iD)
	}
	row := exec.QueryRowContext(ctx, sql, tenantID, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if person exists")
	}

	return exists, nil
}

// Exists checks if the Person row exists.
func (o *Person) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PersonExists(ctx, exec, o.TenantID, o.ID)
}
