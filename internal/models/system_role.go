// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// SystemRole is an object representing the database table.
type SystemRole struct {
	ID          string           `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID    string           `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Name        string           `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String      `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Type        string           `boil:"type" json:"type" toml:"type" yaml:"type"`
	Status      string           `boil:"status" json:"status" toml:"status" yaml:"status"`
	Priority    int              `boil:"priority" json:"priority" toml:"priority" yaml:"priority"`
	CreatedBy   string           `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt   time.Time        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedBy   string           `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	UpdatedAt   time.Time        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Permissions types.Int64Array `boil:"permissions" json:"permissions" toml:"permissions" yaml:"permissions"`
	BaseRoleID  null.String      `boil:"base_role_id" json:"base_role_id,omitempty" toml:"base_role_id" yaml:"base_role_id,omitempty"`

	R *systemRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L systemRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SystemRoleColumns = struct {
	ID          string
	TenantID    string
	Name        string
	Description string
	Type        string
	Status      string
	Priority    string
	CreatedBy   string
	CreatedAt   string
	UpdatedBy   string
	UpdatedAt   string
	Permissions string
	BaseRoleID  string
}{
	ID:          "id",
	TenantID:    "tenant_id",
	Name:        "name",
	Description: "description",
	Type:        "type",
	Status:      "status",
	Priority:    "priority",
	CreatedBy:   "created_by",
	CreatedAt:   "created_at",
	UpdatedBy:   "updated_by",
	UpdatedAt:   "updated_at",
	Permissions: "permissions",
	BaseRoleID:  "base_role_id",
}

var SystemRoleTableColumns = struct {
	ID          string
	TenantID    string
	Name        string
	Description string
	Type        string
	Status      string
	Priority    string
	CreatedBy   string
	CreatedAt   string
	UpdatedBy   string
	UpdatedAt   string
	Permissions string
	BaseRoleID  string
}{
	ID:          "system_role.id",
	TenantID:    "system_role.tenant_id",
	Name:        "system_role.name",
	Description: "system_role.description",
	Type:        "system_role.type",
	Status:      "system_role.status",
	Priority:    "system_role.priority",
	CreatedBy:   "system_role.created_by",
	CreatedAt:   "system_role.created_at",
	UpdatedBy:   "system_role.updated_by",
	UpdatedAt:   "system_role.updated_at",
	Permissions: "system_role.permissions",
	BaseRoleID:  "system_role.base_role_id",
}

// Generated where

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SystemRoleWhere = struct {
	ID          whereHelperstring
	TenantID    whereHelperstring
	Name        whereHelperstring
	Description whereHelpernull_String
	Type        whereHelperstring
	Status      whereHelperstring
	Priority    whereHelperint
	CreatedBy   whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedBy   whereHelperstring
	UpdatedAt   whereHelpertime_Time
	Permissions whereHelpertypes_Int64Array
	BaseRoleID  whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"system_role\".\"id\""},
	TenantID:    whereHelperstring{field: "\"system_role\".\"tenant_id\""},
	Name:        whereHelperstring{field: "\"system_role\".\"name\""},
	Description: whereHelpernull_String{field: "\"system_role\".\"description\""},
	Type:        whereHelperstring{field: "\"system_role\".\"type\""},
	Status:      whereHelperstring{field: "\"system_role\".\"status\""},
	Priority:    whereHelperint{field: "\"system_role\".\"priority\""},
	CreatedBy:   whereHelperstring{field: "\"system_role\".\"created_by\""},
	CreatedAt:   whereHelpertime_Time{field: "\"system_role\".\"created_at\""},
	UpdatedBy:   whereHelperstring{field: "\"system_role\".\"updated_by\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"system_role\".\"updated_at\""},
	Permissions: whereHelpertypes_Int64Array{field: "\"system_role\".\"permissions\""},
	BaseRoleID:  whereHelpernull_String{field: "\"system_role\".\"base_role_id\""},
}

// SystemRoleRels is where relationship names are stored.
var SystemRoleRels = struct {
}{}

// systemRoleR is where relationships are stored.
type systemRoleR struct {
}

// NewStruct creates a new relationship struct
func (*systemRoleR) NewStruct() *systemRoleR {
	return &systemRoleR{}
}

// systemRoleL is where Load methods for each relationship are stored.
type systemRoleL struct{}

var (
	systemRoleAllColumns            = []string{"id", "tenant_id", "name", "description", "type", "status", "priority", "created_by", "created_at", "updated_by", "updated_at", "permissions", "base_role_id"}
	systemRoleColumnsWithoutDefault = []string{"id", "tenant_id", "name", "type", "status", "priority", "created_by", "created_at", "updated_by", "updated_at", "permissions"}
	systemRoleColumnsWithDefault    = []string{"description", "base_role_id"}
	systemRolePrimaryKeyColumns     = []string{"id"}
	systemRoleGeneratedColumns      = []string{}
)

type (
	// SystemRoleSlice is an alias for a slice of pointers to SystemRole.
	// This should almost always be used instead of []SystemRole.
	SystemRoleSlice []*SystemRole
	// SystemRoleHook is the signature for custom SystemRole hook methods
	SystemRoleHook func(context.Context, boil.ContextExecutor, *SystemRole) error

	systemRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	systemRoleType                 = reflect.TypeOf(&SystemRole{})
	systemRoleMapping              = queries.MakeStructMapping(systemRoleType)
	systemRolePrimaryKeyMapping, _ = queries.BindMapping(systemRoleType, systemRoleMapping, systemRolePrimaryKeyColumns)
	systemRoleInsertCacheMut       sync.RWMutex
	systemRoleInsertCache          = make(map[string]insertCache)
	systemRoleUpdateCacheMut       sync.RWMutex
	systemRoleUpdateCache          = make(map[string]updateCache)
	systemRoleUpsertCacheMut       sync.RWMutex
	systemRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var systemRoleAfterSelectHooks []SystemRoleHook

var systemRoleBeforeInsertHooks []SystemRoleHook
var systemRoleAfterInsertHooks []SystemRoleHook

var systemRoleBeforeUpdateHooks []SystemRoleHook
var systemRoleAfterUpdateHooks []SystemRoleHook

var systemRoleBeforeDeleteHooks []SystemRoleHook
var systemRoleAfterDeleteHooks []SystemRoleHook

var systemRoleBeforeUpsertHooks []SystemRoleHook
var systemRoleAfterUpsertHooks []SystemRoleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SystemRole) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SystemRole) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SystemRole) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SystemRole) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SystemRole) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SystemRole) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SystemRole) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SystemRole) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SystemRole) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemRoleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSystemRoleHook registers your hook function for all future operations.
func AddSystemRoleHook(hookPoint boil.HookPoint, systemRoleHook SystemRoleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		systemRoleAfterSelectHooks = append(systemRoleAfterSelectHooks, systemRoleHook)
	case boil.BeforeInsertHook:
		systemRoleBeforeInsertHooks = append(systemRoleBeforeInsertHooks, systemRoleHook)
	case boil.AfterInsertHook:
		systemRoleAfterInsertHooks = append(systemRoleAfterInsertHooks, systemRoleHook)
	case boil.BeforeUpdateHook:
		systemRoleBeforeUpdateHooks = append(systemRoleBeforeUpdateHooks, systemRoleHook)
	case boil.AfterUpdateHook:
		systemRoleAfterUpdateHooks = append(systemRoleAfterUpdateHooks, systemRoleHook)
	case boil.BeforeDeleteHook:
		systemRoleBeforeDeleteHooks = append(systemRoleBeforeDeleteHooks, systemRoleHook)
	case boil.AfterDeleteHook:
		systemRoleAfterDeleteHooks = append(systemRoleAfterDeleteHooks, systemRoleHook)
	case boil.BeforeUpsertHook:
		systemRoleBeforeUpsertHooks = append(systemRoleBeforeUpsertHooks, systemRoleHook)
	case boil.AfterUpsertHook:
		systemRoleAfterUpsertHooks = append(systemRoleAfterUpsertHooks, systemRoleHook)
	}
}

// One returns a single systemRole record from the query.
func (q systemRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SystemRole, error) {
	o := &SystemRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for system_role")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SystemRole records from the query.
func (q systemRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (SystemRoleSlice, error) {
	var o []*SystemRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SystemRole slice")
	}

	if len(systemRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SystemRole records in the query.
func (q systemRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count system_role rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q systemRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if system_role exists")
	}

	return count > 0, nil
}

// SystemRoles retrieves all the records using an executor.
func SystemRoles(mods ...qm.QueryMod) systemRoleQuery {
	mods = append(mods, qm.From("\"system_role\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"system_role\".*"})
	}

	return systemRoleQuery{q}
}

// FindSystemRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSystemRole(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SystemRole, error) {
	systemRoleObj := &SystemRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"system_role\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, systemRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from system_role")
	}

	if err = systemRoleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return systemRoleObj, err
	}

	return systemRoleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SystemRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no system_role provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	systemRoleInsertCacheMut.RLock()
	cache, cached := systemRoleInsertCache[key]
	systemRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			systemRoleAllColumns,
			systemRoleColumnsWithDefault,
			systemRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(systemRoleType, systemRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(systemRoleType, systemRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"system_role\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"system_role\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into system_role")
	}

	if !cached {
		systemRoleInsertCacheMut.Lock()
		systemRoleInsertCache[key] = cache
		systemRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SystemRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SystemRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	systemRoleUpdateCacheMut.RLock()
	cache, cached := systemRoleUpdateCache[key]
	systemRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			systemRoleAllColumns,
			systemRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update system_role, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"system_role\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, systemRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(systemRoleType, systemRoleMapping, append(wl, systemRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update system_role row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for system_role")
	}

	if !cached {
		systemRoleUpdateCacheMut.Lock()
		systemRoleUpdateCache[key] = cache
		systemRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q systemRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for system_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for system_role")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SystemRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"system_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, systemRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in systemRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all systemRole")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SystemRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no system_role provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	systemRoleUpsertCacheMut.RLock()
	cache, cached := systemRoleUpsertCache[key]
	systemRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			systemRoleAllColumns,
			systemRoleColumnsWithDefault,
			systemRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			systemRoleAllColumns,
			systemRolePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert system_role, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(systemRolePrimaryKeyColumns))
			copy(conflict, systemRolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"system_role\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(systemRoleType, systemRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(systemRoleType, systemRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert system_role")
	}

	if !cached {
		systemRoleUpsertCacheMut.Lock()
		systemRoleUpsertCache[key] = cache
		systemRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SystemRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SystemRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SystemRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), systemRolePrimaryKeyMapping)
	sql := "DELETE FROM \"system_role\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from system_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for system_role")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q systemRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no systemRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from system_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for system_role")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SystemRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(systemRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"system_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from systemRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for system_role")
	}

	if len(systemRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SystemRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSystemRole(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SystemRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SystemRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"system_role\".* FROM \"system_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SystemRoleSlice")
	}

	*o = slice

	return nil
}

// SystemRoleExists checks if the SystemRole row exists.
func SystemRoleExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"system_role\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if system_role exists")
	}

	return exists, nil
}

// Exists checks if the SystemRole row exists.
func (o *SystemRole) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SystemRoleExists(ctx, exec, o.ID)
}
