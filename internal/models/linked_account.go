// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LinkedAccount is an object representing the database table.
type LinkedAccount struct {
	TenantID  string    `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Source    string    `boil:"source" json:"source" toml:"source" yaml:"source"`
	Type      string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Status    string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	Payload   null.JSON `boil:"payload" json:"payload,omitempty" toml:"payload" yaml:"payload,omitempty"`
	Metadata  null.JSON `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *linkedAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L linkedAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LinkedAccountColumns = struct {
	TenantID  string
	UserID    string
	Source    string
	Type      string
	Status    string
	Payload   string
	Metadata  string
	CreatedAt string
	UpdatedAt string
}{
	TenantID:  "tenant_id",
	UserID:    "user_id",
	Source:    "source",
	Type:      "type",
	Status:    "status",
	Payload:   "payload",
	Metadata:  "metadata",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var LinkedAccountTableColumns = struct {
	TenantID  string
	UserID    string
	Source    string
	Type      string
	Status    string
	Payload   string
	Metadata  string
	CreatedAt string
	UpdatedAt string
}{
	TenantID:  "linked_account.tenant_id",
	UserID:    "linked_account.user_id",
	Source:    "linked_account.source",
	Type:      "linked_account.type",
	Status:    "linked_account.status",
	Payload:   "linked_account.payload",
	Metadata:  "linked_account.metadata",
	CreatedAt: "linked_account.created_at",
	UpdatedAt: "linked_account.updated_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var LinkedAccountWhere = struct {
	TenantID  whereHelperstring
	UserID    whereHelperstring
	Source    whereHelperstring
	Type      whereHelperstring
	Status    whereHelperstring
	Payload   whereHelpernull_JSON
	Metadata  whereHelpernull_JSON
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	TenantID:  whereHelperstring{field: "\"linked_account\".\"tenant_id\""},
	UserID:    whereHelperstring{field: "\"linked_account\".\"user_id\""},
	Source:    whereHelperstring{field: "\"linked_account\".\"source\""},
	Type:      whereHelperstring{field: "\"linked_account\".\"type\""},
	Status:    whereHelperstring{field: "\"linked_account\".\"status\""},
	Payload:   whereHelpernull_JSON{field: "\"linked_account\".\"payload\""},
	Metadata:  whereHelpernull_JSON{field: "\"linked_account\".\"metadata\""},
	CreatedAt: whereHelpertime_Time{field: "\"linked_account\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"linked_account\".\"updated_at\""},
}

// LinkedAccountRels is where relationship names are stored.
var LinkedAccountRels = struct {
}{}

// linkedAccountR is where relationships are stored.
type linkedAccountR struct {
}

// NewStruct creates a new relationship struct
func (*linkedAccountR) NewStruct() *linkedAccountR {
	return &linkedAccountR{}
}

// linkedAccountL is where Load methods for each relationship are stored.
type linkedAccountL struct{}

var (
	linkedAccountAllColumns            = []string{"tenant_id", "user_id", "source", "type", "status", "payload", "metadata", "created_at", "updated_at"}
	linkedAccountColumnsWithoutDefault = []string{"tenant_id", "user_id", "source", "type", "status"}
	linkedAccountColumnsWithDefault    = []string{"payload", "metadata", "created_at", "updated_at"}
	linkedAccountPrimaryKeyColumns     = []string{"tenant_id", "user_id", "source", "type"}
	linkedAccountGeneratedColumns      = []string{}
)

type (
	// LinkedAccountSlice is an alias for a slice of pointers to LinkedAccount.
	// This should almost always be used instead of []LinkedAccount.
	LinkedAccountSlice []*LinkedAccount
	// LinkedAccountHook is the signature for custom LinkedAccount hook methods
	LinkedAccountHook func(context.Context, boil.ContextExecutor, *LinkedAccount) error

	linkedAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	linkedAccountType                 = reflect.TypeOf(&LinkedAccount{})
	linkedAccountMapping              = queries.MakeStructMapping(linkedAccountType)
	linkedAccountPrimaryKeyMapping, _ = queries.BindMapping(linkedAccountType, linkedAccountMapping, linkedAccountPrimaryKeyColumns)
	linkedAccountInsertCacheMut       sync.RWMutex
	linkedAccountInsertCache          = make(map[string]insertCache)
	linkedAccountUpdateCacheMut       sync.RWMutex
	linkedAccountUpdateCache          = make(map[string]updateCache)
	linkedAccountUpsertCacheMut       sync.RWMutex
	linkedAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var linkedAccountAfterSelectHooks []LinkedAccountHook

var linkedAccountBeforeInsertHooks []LinkedAccountHook
var linkedAccountAfterInsertHooks []LinkedAccountHook

var linkedAccountBeforeUpdateHooks []LinkedAccountHook
var linkedAccountAfterUpdateHooks []LinkedAccountHook

var linkedAccountBeforeDeleteHooks []LinkedAccountHook
var linkedAccountAfterDeleteHooks []LinkedAccountHook

var linkedAccountBeforeUpsertHooks []LinkedAccountHook
var linkedAccountAfterUpsertHooks []LinkedAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LinkedAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LinkedAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LinkedAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LinkedAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LinkedAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LinkedAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LinkedAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LinkedAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LinkedAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range linkedAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLinkedAccountHook registers your hook function for all future operations.
func AddLinkedAccountHook(hookPoint boil.HookPoint, linkedAccountHook LinkedAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		linkedAccountAfterSelectHooks = append(linkedAccountAfterSelectHooks, linkedAccountHook)
	case boil.BeforeInsertHook:
		linkedAccountBeforeInsertHooks = append(linkedAccountBeforeInsertHooks, linkedAccountHook)
	case boil.AfterInsertHook:
		linkedAccountAfterInsertHooks = append(linkedAccountAfterInsertHooks, linkedAccountHook)
	case boil.BeforeUpdateHook:
		linkedAccountBeforeUpdateHooks = append(linkedAccountBeforeUpdateHooks, linkedAccountHook)
	case boil.AfterUpdateHook:
		linkedAccountAfterUpdateHooks = append(linkedAccountAfterUpdateHooks, linkedAccountHook)
	case boil.BeforeDeleteHook:
		linkedAccountBeforeDeleteHooks = append(linkedAccountBeforeDeleteHooks, linkedAccountHook)
	case boil.AfterDeleteHook:
		linkedAccountAfterDeleteHooks = append(linkedAccountAfterDeleteHooks, linkedAccountHook)
	case boil.BeforeUpsertHook:
		linkedAccountBeforeUpsertHooks = append(linkedAccountBeforeUpsertHooks, linkedAccountHook)
	case boil.AfterUpsertHook:
		linkedAccountAfterUpsertHooks = append(linkedAccountAfterUpsertHooks, linkedAccountHook)
	}
}

// One returns a single linkedAccount record from the query.
func (q linkedAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LinkedAccount, error) {
	o := &LinkedAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for linked_account")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LinkedAccount records from the query.
func (q linkedAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (LinkedAccountSlice, error) {
	var o []*LinkedAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LinkedAccount slice")
	}

	if len(linkedAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LinkedAccount records in the query.
func (q linkedAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count linked_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q linkedAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if linked_account exists")
	}

	return count > 0, nil
}

// LinkedAccounts retrieves all the records using an executor.
func LinkedAccounts(mods ...qm.QueryMod) linkedAccountQuery {
	mods = append(mods, qm.From("\"linked_account\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"linked_account\".*"})
	}

	return linkedAccountQuery{q}
}

// FindLinkedAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLinkedAccount(ctx context.Context, exec boil.ContextExecutor, tenantID string, userID string, source string, type_ string, selectCols ...string) (*LinkedAccount, error) {
	linkedAccountObj := &LinkedAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"linked_account\" where \"tenant_id\"=$1 AND \"user_id\"=$2 AND \"source\"=$3 AND \"type\"=$4", sel,
	)

	q := queries.Raw(query, tenantID, userID, source, type_)

	err := q.Bind(ctx, exec, linkedAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from linked_account")
	}

	if err = linkedAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return linkedAccountObj, err
	}

	return linkedAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LinkedAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no linked_account provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(linkedAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	linkedAccountInsertCacheMut.RLock()
	cache, cached := linkedAccountInsertCache[key]
	linkedAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			linkedAccountAllColumns,
			linkedAccountColumnsWithDefault,
			linkedAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(linkedAccountType, linkedAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(linkedAccountType, linkedAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"linked_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"linked_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into linked_account")
	}

	if !cached {
		linkedAccountInsertCacheMut.Lock()
		linkedAccountInsertCache[key] = cache
		linkedAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LinkedAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LinkedAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	linkedAccountUpdateCacheMut.RLock()
	cache, cached := linkedAccountUpdateCache[key]
	linkedAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			linkedAccountAllColumns,
			linkedAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update linked_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"linked_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, linkedAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(linkedAccountType, linkedAccountMapping, append(wl, linkedAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update linked_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for linked_account")
	}

	if !cached {
		linkedAccountUpdateCacheMut.Lock()
		linkedAccountUpdateCache[key] = cache
		linkedAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q linkedAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for linked_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for linked_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LinkedAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkedAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"linked_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, linkedAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in linkedAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all linkedAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LinkedAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no linked_account provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(linkedAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	linkedAccountUpsertCacheMut.RLock()
	cache, cached := linkedAccountUpsertCache[key]
	linkedAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			linkedAccountAllColumns,
			linkedAccountColumnsWithDefault,
			linkedAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			linkedAccountAllColumns,
			linkedAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert linked_account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(linkedAccountPrimaryKeyColumns))
			copy(conflict, linkedAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"linked_account\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(linkedAccountType, linkedAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(linkedAccountType, linkedAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert linked_account")
	}

	if !cached {
		linkedAccountUpsertCacheMut.Lock()
		linkedAccountUpsertCache[key] = cache
		linkedAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LinkedAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LinkedAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LinkedAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), linkedAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"linked_account\" WHERE \"tenant_id\"=$1 AND \"user_id\"=$2 AND \"source\"=$3 AND \"type\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from linked_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for linked_account")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q linkedAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no linkedAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from linked_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for linked_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LinkedAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(linkedAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkedAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"linked_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, linkedAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from linkedAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for linked_account")
	}

	if len(linkedAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LinkedAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLinkedAccount(ctx, exec, o.TenantID, o.UserID, o.Source, o.Type)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LinkedAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LinkedAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkedAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"linked_account\".* FROM \"linked_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, linkedAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LinkedAccountSlice")
	}

	*o = slice

	return nil
}

// LinkedAccountExists checks if the LinkedAccount row exists.
func LinkedAccountExists(ctx context.Context, exec boil.ContextExecutor, tenantID string, userID string, source string, type_ string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"linked_account\" where \"tenant_id\"=$1 AND \"user_id\"=$2 AND \"source\"=$3 AND \"type\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tenantID, userID, source, type_)
	}
	row := exec.QueryRowContext(ctx, sql, tenantID, userID, source, type_)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if linked_account exists")
	}

	return exists, nil
}

// Exists checks if the LinkedAccount row exists.
func (o *LinkedAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LinkedAccountExists(ctx, exec, o.TenantID, o.UserID, o.Source, o.Type)
}
