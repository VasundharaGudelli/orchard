// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

// Enum values for GroupType
const (
	GroupTypeInternal string = "internal"
	GroupTypeManager  string = "manager"
	GroupTypeIc       string = "ic"
)

func AllGroupType() []string {
	return []string{
		GroupTypeInternal,
		GroupTypeManager,
		GroupTypeIc,
	}
}

// Enum values for GroupStatus
const (
	GroupStatusActive   string = "active"
	GroupStatusInactive string = "inactive"
)

func AllGroupStatus() []string {
	return []string{
		GroupStatusActive,
		GroupStatusInactive,
	}
}

// Enum values for LinkedAccountStatus
const (
	LinkedAccountStatusActive  string = "active"
	LinkedAccountStatusDeleted string = "deleted"
	LinkedAccountStatusPending string = "pending"
	LinkedAccountStatusErrored string = "errored"
)

func AllLinkedAccountStatus() []string {
	return []string{
		LinkedAccountStatusActive,
		LinkedAccountStatusDeleted,
		LinkedAccountStatusPending,
		LinkedAccountStatusErrored,
	}
}

// Enum values for PersonStatus
const (
	PersonStatusActive   string = "active"
	PersonStatusInactive string = "inactive"
)

func AllPersonStatus() []string {
	return []string{
		PersonStatusActive,
		PersonStatusInactive,
	}
}

// Enum values for PersonType
const (
	PersonTypeInternal string = "internal"
	PersonTypeManager  string = "manager"
	PersonTypeIc       string = "ic"
)

func AllPersonType() []string {
	return []string{
		PersonTypeInternal,
		PersonTypeManager,
		PersonTypeIc,
	}
}

// Enum values for SystemRoleType
const (
	SystemRoleTypeInternal string = "internal"
	SystemRoleTypeManager  string = "manager"
	SystemRoleTypeIc       string = "ic"
)

func AllSystemRoleType() []string {
	return []string{
		SystemRoleTypeInternal,
		SystemRoleTypeManager,
		SystemRoleTypeIc,
	}
}

// Enum values for SystemRoleStatus
const (
	SystemRoleStatusActive   string = "active"
	SystemRoleStatusInactive string = "inactive"
)

func AllSystemRoleStatus() []string {
	return []string{
		SystemRoleStatusActive,
		SystemRoleStatusInactive,
	}
}

// Enum values for TenantStatus
const (
	TenantStatusActive   string = "active"
	TenantStatusDeleted  string = "deleted"
	TenantStatusPending  string = "pending"
	TenantStatusExpired  string = "expired"
	TenantStatusArchived string = "archived"
)

func AllTenantStatus() []string {
	return []string{
		TenantStatusActive,
		TenantStatusDeleted,
		TenantStatusPending,
		TenantStatusExpired,
		TenantStatusArchived,
	}
}

// Enum values for GroupSyncStatus
const (
	GroupSyncStatusActive     string = "active"
	GroupSyncStatusPeopleOnly string = "people_only"
	GroupSyncStatusInactive   string = "inactive"
)

func AllGroupSyncStatus() []string {
	return []string{
		GroupSyncStatusActive,
		GroupSyncStatusPeopleOnly,
		GroupSyncStatusInactive,
	}
}
