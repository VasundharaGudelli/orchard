// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGroupViewers(t *testing.T) {
	t.Parallel()

	query := GroupViewers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGroupViewersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupViewersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GroupViewers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupViewersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupViewerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupViewersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GroupViewerExists(ctx, tx, o.TenantID, o.PersonID, o.GroupID)
	if err != nil {
		t.Errorf("Unable to check if GroupViewer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GroupViewerExists to return true, but got false.")
	}
}

func testGroupViewersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	groupViewerFound, err := FindGroupViewer(ctx, tx, o.TenantID, o.PersonID, o.GroupID)
	if err != nil {
		t.Error(err)
	}

	if groupViewerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGroupViewersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GroupViewers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGroupViewersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GroupViewers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGroupViewersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	groupViewerOne := &GroupViewer{}
	groupViewerTwo := &GroupViewer{}
	if err = randomize.Struct(seed, groupViewerOne, groupViewerDBTypes, false, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}
	if err = randomize.Struct(seed, groupViewerTwo, groupViewerDBTypes, false, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupViewerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupViewerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupViewers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGroupViewersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	groupViewerOne := &GroupViewer{}
	groupViewerTwo := &GroupViewer{}
	if err = randomize.Struct(seed, groupViewerOne, groupViewerDBTypes, false, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}
	if err = randomize.Struct(seed, groupViewerTwo, groupViewerDBTypes, false, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupViewerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupViewerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func groupViewerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func groupViewerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func groupViewerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func groupViewerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func groupViewerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func groupViewerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func groupViewerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func groupViewerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func groupViewerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupViewer) error {
	*o = GroupViewer{}
	return nil
}

func testGroupViewersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GroupViewer{}
	o := &GroupViewer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, groupViewerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GroupViewer object: %s", err)
	}

	AddGroupViewerHook(boil.BeforeInsertHook, groupViewerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	groupViewerBeforeInsertHooks = []GroupViewerHook{}

	AddGroupViewerHook(boil.AfterInsertHook, groupViewerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	groupViewerAfterInsertHooks = []GroupViewerHook{}

	AddGroupViewerHook(boil.AfterSelectHook, groupViewerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	groupViewerAfterSelectHooks = []GroupViewerHook{}

	AddGroupViewerHook(boil.BeforeUpdateHook, groupViewerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	groupViewerBeforeUpdateHooks = []GroupViewerHook{}

	AddGroupViewerHook(boil.AfterUpdateHook, groupViewerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	groupViewerAfterUpdateHooks = []GroupViewerHook{}

	AddGroupViewerHook(boil.BeforeDeleteHook, groupViewerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	groupViewerBeforeDeleteHooks = []GroupViewerHook{}

	AddGroupViewerHook(boil.AfterDeleteHook, groupViewerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	groupViewerAfterDeleteHooks = []GroupViewerHook{}

	AddGroupViewerHook(boil.BeforeUpsertHook, groupViewerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	groupViewerBeforeUpsertHooks = []GroupViewerHook{}

	AddGroupViewerHook(boil.AfterUpsertHook, groupViewerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	groupViewerAfterUpsertHooks = []GroupViewerHook{}
}

func testGroupViewersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupViewersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(groupViewerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupViewersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupViewersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupViewerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupViewersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupViewers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	groupViewerDBTypes = map[string]string{`GroupID`: `text`, `PersonID`: `text`, `TenantID`: `uuid`, `Permissions`: `bigint`, `CreatedBy`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedBy`: `text`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testGroupViewersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(groupViewerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(groupViewerAllColumns) == len(groupViewerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGroupViewersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(groupViewerAllColumns) == len(groupViewerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupViewer{}
	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupViewerDBTypes, true, groupViewerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(groupViewerAllColumns, groupViewerPrimaryKeyColumns) {
		fields = groupViewerAllColumns
	} else {
		fields = strmangle.SetComplement(
			groupViewerAllColumns,
			groupViewerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GroupViewerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGroupViewersUpsert(t *testing.T) {
	t.Parallel()

	if len(groupViewerAllColumns) == len(groupViewerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GroupViewer{}
	if err = randomize.Struct(seed, &o, groupViewerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupViewer: %s", err)
	}

	count, err := GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, groupViewerDBTypes, false, groupViewerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupViewer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupViewer: %s", err)
	}

	count, err = GroupViewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
