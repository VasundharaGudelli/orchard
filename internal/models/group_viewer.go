// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroupViewer is an object representing the database table.
type GroupViewer struct {
	GroupID     string    `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	PersonID    string    `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	TenantID    string    `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Permissions int64     `boil:"permissions" json:"permissions" toml:"permissions" yaml:"permissions"`
	CreatedBy   string    `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedBy   string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *groupViewerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupViewerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupViewerColumns = struct {
	GroupID     string
	PersonID    string
	TenantID    string
	Permissions string
	CreatedBy   string
	CreatedAt   string
	UpdatedBy   string
	UpdatedAt   string
}{
	GroupID:     "group_id",
	PersonID:    "person_id",
	TenantID:    "tenant_id",
	Permissions: "permissions",
	CreatedBy:   "created_by",
	CreatedAt:   "created_at",
	UpdatedBy:   "updated_by",
	UpdatedAt:   "updated_at",
}

var GroupViewerTableColumns = struct {
	GroupID     string
	PersonID    string
	TenantID    string
	Permissions string
	CreatedBy   string
	CreatedAt   string
	UpdatedBy   string
	UpdatedAt   string
}{
	GroupID:     "group_viewer.group_id",
	PersonID:    "group_viewer.person_id",
	TenantID:    "group_viewer.tenant_id",
	Permissions: "group_viewer.permissions",
	CreatedBy:   "group_viewer.created_by",
	CreatedAt:   "group_viewer.created_at",
	UpdatedBy:   "group_viewer.updated_by",
	UpdatedAt:   "group_viewer.updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var GroupViewerWhere = struct {
	GroupID     whereHelperstring
	PersonID    whereHelperstring
	TenantID    whereHelperstring
	Permissions whereHelperint64
	CreatedBy   whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedBy   whereHelperstring
	UpdatedAt   whereHelpertime_Time
}{
	GroupID:     whereHelperstring{field: "\"group_viewer\".\"group_id\""},
	PersonID:    whereHelperstring{field: "\"group_viewer\".\"person_id\""},
	TenantID:    whereHelperstring{field: "\"group_viewer\".\"tenant_id\""},
	Permissions: whereHelperint64{field: "\"group_viewer\".\"permissions\""},
	CreatedBy:   whereHelperstring{field: "\"group_viewer\".\"created_by\""},
	CreatedAt:   whereHelpertime_Time{field: "\"group_viewer\".\"created_at\""},
	UpdatedBy:   whereHelperstring{field: "\"group_viewer\".\"updated_by\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"group_viewer\".\"updated_at\""},
}

// GroupViewerRels is where relationship names are stored.
var GroupViewerRels = struct {
}{}

// groupViewerR is where relationships are stored.
type groupViewerR struct {
}

// NewStruct creates a new relationship struct
func (*groupViewerR) NewStruct() *groupViewerR {
	return &groupViewerR{}
}

// groupViewerL is where Load methods for each relationship are stored.
type groupViewerL struct{}

var (
	groupViewerAllColumns            = []string{"group_id", "person_id", "tenant_id", "permissions", "created_by", "created_at", "updated_by", "updated_at"}
	groupViewerColumnsWithoutDefault = []string{"group_id", "person_id", "tenant_id"}
	groupViewerColumnsWithDefault    = []string{"permissions", "created_by", "created_at", "updated_by", "updated_at"}
	groupViewerPrimaryKeyColumns     = []string{"tenant_id", "person_id", "group_id"}
)

type (
	// GroupViewerSlice is an alias for a slice of pointers to GroupViewer.
	// This should almost always be used instead of []GroupViewer.
	GroupViewerSlice []*GroupViewer
	// GroupViewerHook is the signature for custom GroupViewer hook methods
	GroupViewerHook func(context.Context, boil.ContextExecutor, *GroupViewer) error

	groupViewerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupViewerType                 = reflect.TypeOf(&GroupViewer{})
	groupViewerMapping              = queries.MakeStructMapping(groupViewerType)
	groupViewerPrimaryKeyMapping, _ = queries.BindMapping(groupViewerType, groupViewerMapping, groupViewerPrimaryKeyColumns)
	groupViewerInsertCacheMut       sync.RWMutex
	groupViewerInsertCache          = make(map[string]insertCache)
	groupViewerUpdateCacheMut       sync.RWMutex
	groupViewerUpdateCache          = make(map[string]updateCache)
	groupViewerUpsertCacheMut       sync.RWMutex
	groupViewerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupViewerBeforeInsertHooks []GroupViewerHook
var groupViewerBeforeUpdateHooks []GroupViewerHook
var groupViewerBeforeDeleteHooks []GroupViewerHook
var groupViewerBeforeUpsertHooks []GroupViewerHook

var groupViewerAfterInsertHooks []GroupViewerHook
var groupViewerAfterSelectHooks []GroupViewerHook
var groupViewerAfterUpdateHooks []GroupViewerHook
var groupViewerAfterDeleteHooks []GroupViewerHook
var groupViewerAfterUpsertHooks []GroupViewerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupViewer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupViewer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupViewer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupViewer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupViewer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupViewer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupViewer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupViewer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupViewer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupViewerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupViewerHook registers your hook function for all future operations.
func AddGroupViewerHook(hookPoint boil.HookPoint, groupViewerHook GroupViewerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		groupViewerBeforeInsertHooks = append(groupViewerBeforeInsertHooks, groupViewerHook)
	case boil.BeforeUpdateHook:
		groupViewerBeforeUpdateHooks = append(groupViewerBeforeUpdateHooks, groupViewerHook)
	case boil.BeforeDeleteHook:
		groupViewerBeforeDeleteHooks = append(groupViewerBeforeDeleteHooks, groupViewerHook)
	case boil.BeforeUpsertHook:
		groupViewerBeforeUpsertHooks = append(groupViewerBeforeUpsertHooks, groupViewerHook)
	case boil.AfterInsertHook:
		groupViewerAfterInsertHooks = append(groupViewerAfterInsertHooks, groupViewerHook)
	case boil.AfterSelectHook:
		groupViewerAfterSelectHooks = append(groupViewerAfterSelectHooks, groupViewerHook)
	case boil.AfterUpdateHook:
		groupViewerAfterUpdateHooks = append(groupViewerAfterUpdateHooks, groupViewerHook)
	case boil.AfterDeleteHook:
		groupViewerAfterDeleteHooks = append(groupViewerAfterDeleteHooks, groupViewerHook)
	case boil.AfterUpsertHook:
		groupViewerAfterUpsertHooks = append(groupViewerAfterUpsertHooks, groupViewerHook)
	}
}

// One returns a single groupViewer record from the query.
func (q groupViewerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupViewer, error) {
	o := &GroupViewer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_viewer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupViewer records from the query.
func (q groupViewerQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupViewerSlice, error) {
	var o []*GroupViewer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupViewer slice")
	}

	if len(groupViewerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupViewer records in the query.
func (q groupViewerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_viewer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupViewerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_viewer exists")
	}

	return count > 0, nil
}

// GroupViewers retrieves all the records using an executor.
func GroupViewers(mods ...qm.QueryMod) groupViewerQuery {
	mods = append(mods, qm.From("\"group_viewer\""))
	return groupViewerQuery{NewQuery(mods...)}
}

// FindGroupViewer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupViewer(ctx context.Context, exec boil.ContextExecutor, tenantID string, personID string, groupID string, selectCols ...string) (*GroupViewer, error) {
	groupViewerObj := &GroupViewer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"group_viewer\" where \"tenant_id\"=$1 AND \"person_id\"=$2 AND \"group_id\"=$3", sel,
	)

	q := queries.Raw(query, tenantID, personID, groupID)

	err := q.Bind(ctx, exec, groupViewerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_viewer")
	}

	if err = groupViewerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupViewerObj, err
	}

	return groupViewerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupViewer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_viewer provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupViewerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupViewerInsertCacheMut.RLock()
	cache, cached := groupViewerInsertCache[key]
	groupViewerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupViewerAllColumns,
			groupViewerColumnsWithDefault,
			groupViewerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupViewerType, groupViewerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupViewerType, groupViewerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"group_viewer\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"group_viewer\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_viewer")
	}

	if !cached {
		groupViewerInsertCacheMut.Lock()
		groupViewerInsertCache[key] = cache
		groupViewerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupViewer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupViewer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupViewerUpdateCacheMut.RLock()
	cache, cached := groupViewerUpdateCache[key]
	groupViewerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupViewerAllColumns,
			groupViewerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_viewer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"group_viewer\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groupViewerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupViewerType, groupViewerMapping, append(wl, groupViewerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_viewer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_viewer")
	}

	if !cached {
		groupViewerUpdateCacheMut.Lock()
		groupViewerUpdateCache[key] = cache
		groupViewerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupViewerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_viewer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_viewer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupViewerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupViewerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"group_viewer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groupViewerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupViewer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupViewer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupViewer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_viewer provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupViewerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupViewerUpsertCacheMut.RLock()
	cache, cached := groupViewerUpsertCache[key]
	groupViewerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupViewerAllColumns,
			groupViewerColumnsWithDefault,
			groupViewerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			groupViewerAllColumns,
			groupViewerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert group_viewer, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(groupViewerPrimaryKeyColumns))
			copy(conflict, groupViewerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"group_viewer\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(groupViewerType, groupViewerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupViewerType, groupViewerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert group_viewer")
	}

	if !cached {
		groupViewerUpsertCacheMut.Lock()
		groupViewerUpsertCache[key] = cache
		groupViewerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GroupViewer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupViewer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupViewer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupViewerPrimaryKeyMapping)
	sql := "DELETE FROM \"group_viewer\" WHERE \"tenant_id\"=$1 AND \"person_id\"=$2 AND \"group_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_viewer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_viewer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupViewerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupViewerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_viewer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_viewer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupViewerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupViewerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupViewerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"group_viewer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupViewerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupViewer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_viewer")
	}

	if len(groupViewerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupViewer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupViewer(ctx, exec, o.TenantID, o.PersonID, o.GroupID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupViewerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupViewerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupViewerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"group_viewer\".* FROM \"group_viewer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupViewerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupViewerSlice")
	}

	*o = slice

	return nil
}

// GroupViewerExists checks if the GroupViewer row exists.
func GroupViewerExists(ctx context.Context, exec boil.ContextExecutor, tenantID string, personID string, groupID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"group_viewer\" where \"tenant_id\"=$1 AND \"person_id\"=$2 AND \"group_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tenantID, personID, groupID)
	}
	row := exec.QueryRowContext(ctx, sql, tenantID, personID, groupID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_viewer exists")
	}

	return exists, nil
}
