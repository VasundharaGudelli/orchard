// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testConnectorConfigs(t *testing.T) {
	t.Parallel()

	query := ConnectorConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testConnectorConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConnectorConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ConnectorConfigs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConnectorConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ConnectorConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConnectorConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ConnectorConfigExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ConnectorConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ConnectorConfigExists to return true, but got false.")
	}
}

func testConnectorConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	connectorConfigFound, err := FindConnectorConfig(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if connectorConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testConnectorConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ConnectorConfigs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testConnectorConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ConnectorConfigs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testConnectorConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	connectorConfigOne := &ConnectorConfig{}
	connectorConfigTwo := &ConnectorConfig{}
	if err = randomize.Struct(seed, connectorConfigOne, connectorConfigDBTypes, false, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, connectorConfigTwo, connectorConfigDBTypes, false, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = connectorConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = connectorConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ConnectorConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testConnectorConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	connectorConfigOne := &ConnectorConfig{}
	connectorConfigTwo := &ConnectorConfig{}
	if err = randomize.Struct(seed, connectorConfigOne, connectorConfigDBTypes, false, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, connectorConfigTwo, connectorConfigDBTypes, false, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = connectorConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = connectorConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func connectorConfigBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func connectorConfigAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func connectorConfigAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func connectorConfigBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func connectorConfigAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func connectorConfigBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func connectorConfigAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func connectorConfigBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func connectorConfigAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ConnectorConfig) error {
	*o = ConnectorConfig{}
	return nil
}

func testConnectorConfigsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ConnectorConfig{}
	o := &ConnectorConfig{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig object: %s", err)
	}

	AddConnectorConfigHook(boil.BeforeInsertHook, connectorConfigBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	connectorConfigBeforeInsertHooks = []ConnectorConfigHook{}

	AddConnectorConfigHook(boil.AfterInsertHook, connectorConfigAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	connectorConfigAfterInsertHooks = []ConnectorConfigHook{}

	AddConnectorConfigHook(boil.AfterSelectHook, connectorConfigAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	connectorConfigAfterSelectHooks = []ConnectorConfigHook{}

	AddConnectorConfigHook(boil.BeforeUpdateHook, connectorConfigBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	connectorConfigBeforeUpdateHooks = []ConnectorConfigHook{}

	AddConnectorConfigHook(boil.AfterUpdateHook, connectorConfigAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	connectorConfigAfterUpdateHooks = []ConnectorConfigHook{}

	AddConnectorConfigHook(boil.BeforeDeleteHook, connectorConfigBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	connectorConfigBeforeDeleteHooks = []ConnectorConfigHook{}

	AddConnectorConfigHook(boil.AfterDeleteHook, connectorConfigAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	connectorConfigAfterDeleteHooks = []ConnectorConfigHook{}

	AddConnectorConfigHook(boil.BeforeUpsertHook, connectorConfigBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	connectorConfigBeforeUpsertHooks = []ConnectorConfigHook{}

	AddConnectorConfigHook(boil.AfterUpsertHook, connectorConfigAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	connectorConfigAfterUpsertHooks = []ConnectorConfigHook{}
}

func testConnectorConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConnectorConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(connectorConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConnectorConfigToOneTenantUsingTenant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ConnectorConfig
	var foreign Tenant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, connectorConfigDBTypes, false, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TenantID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tenant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ConnectorConfigSlice{&local}
	if err = local.L.LoadTenant(ctx, tx, false, (*[]*ConnectorConfig)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tenant = nil
	if err = local.L.LoadTenant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testConnectorConfigToOneSetOpTenantUsingTenant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ConnectorConfig
	var b, c Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, connectorConfigDBTypes, false, strmangle.SetComplement(connectorConfigPrimaryKeyColumns, connectorConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tenant{&b, &c} {
		err = a.SetTenant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tenant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ConnectorConfigs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TenantID != x.ID {
			t.Error("foreign key was wrong value", a.TenantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TenantID))
		reflect.Indirect(reflect.ValueOf(&a.TenantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TenantID != x.ID {
			t.Error("foreign key was wrong value", a.TenantID, x.ID)
		}
	}
}

func testConnectorConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testConnectorConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ConnectorConfigSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testConnectorConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ConnectorConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	connectorConfigDBTypes = map[string]string{`ID`: `uuid`, `Type`: `enum.connector_config_type('salesforce','hubspot')`, `TenantID`: `uuid`, `Config`: `jsonb`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                      = bytes.MinRead
)

func testConnectorConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(connectorConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(connectorConfigAllColumns) == len(connectorConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testConnectorConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(connectorConfigAllColumns) == len(connectorConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ConnectorConfig{}
	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, connectorConfigDBTypes, true, connectorConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(connectorConfigAllColumns, connectorConfigPrimaryKeyColumns) {
		fields = connectorConfigAllColumns
	} else {
		fields = strmangle.SetComplement(
			connectorConfigAllColumns,
			connectorConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ConnectorConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testConnectorConfigsUpsert(t *testing.T) {
	t.Parallel()

	if len(connectorConfigAllColumns) == len(connectorConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ConnectorConfig{}
	if err = randomize.Struct(seed, &o, connectorConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ConnectorConfig: %s", err)
	}

	count, err := ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, connectorConfigDBTypes, false, connectorConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConnectorConfig struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ConnectorConfig: %s", err)
	}

	count, err = ConnectorConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
